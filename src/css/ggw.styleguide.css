
/* 

What is this?
====

<article class="view-mode-full">
  <p><strong>Greenpeace Greenwire Styleguide</strong> is based on <a href="https://github.com/thomasdavis/kaleistyleguide">Kalei Styleguide</a></p>

  <p>In words of the author:</p>

  <blockquote cite="https://github.com/thomasdavis/kaleistyleguide">
  "This project aims at making sure your style sheets are fully documented whilst being synchronized with your webpages styles. To do this it actually uses your live stylesheets in so that at anytime you can review how your styleguide looks."
  </blockquote>

  <h3>Main goals and benefits</h3>
  <p>On <a href="http://blog.rjmetrics.com/2012/02/20/our-living-style-guide-writing-maintainable-htmlcss/">RJMetrics</a>, Matt Monihan counts some goals and benefits when using a Styleguide:</p>
    <ul>
      <li>Create a workflow for creating and understanding new markup.</li>
      <li>Improve the maintainability of the markup.</li>
      <li>Give developers a logical and consistent way to markup HTML.</li>
      <li>Impose markup standards within a growing organization.</li>
      <li>Make it obvious when something strays from being consistent with an organizationâ€™s style. It's an experiment, and hopefully generates feedback.</li>
      <li>Save time.</li>
    </ul>
</article>

Why?
====

<article class="view-mode-full">
	<p>After reading all the goals and benefits, why not? Anyway, here we have an example:</p>
	<p>Imagine that you want to add some new style or a new component into one of the pages of Greenwire. As a new developer you first have to download the repository from <a href="https://github.com/greenpeace/ggw_styleguide">Github Greenpeace</a>, and once you have everything downloaded, you may want to check what do you have.</p>
	<div class="block block-no-icon">
	  <h2 class="block-title">General view of some of the files inside 'ggw_styleguide'</h2>
	  <div class="content" style="margin-top:15px;">
	     <img src="src/images/dev-tree.png"></img>
	  </div>
  </div>
	<p>At first glance, you can see a lot of files which seem to be well organized. For experienced developers, the organization could be intuitive and easy to understand. For not so experienced as me, at the begining, this could be overwhelming.</p>
	<p>Considering the benefits explained before, using the styleguide may save some time to the first group. But a lot of time to the not so experienced developers. Believe me.</p>
</article>

Setting up
====

<article class="view-mode-full">
  <p>To setup your developing branch, you should follow the next steps:</p>
	<div class="block block-no-icon">
	  <h2 class="block-title">1. GitHub</h2>
	  <div class="content" style="margin-top:15px;">
			<p>If you are reading this, I guess you have already cloned Greenwire GitHub repository into your developing branch. Don't know what is Github? Check <a href="https://help.github.com/articles/set-up-git">GitHub documentation</a>. Set it up and learn some basics if you haven't yet.</p>
			<p>Once you setup GitHub, you can clone Greenwire repository in your developing branch using the terminal:</p>
			<p><code class="terminal">git clone git@github.com:greenpeace/ggw_styleguide.git</code></p>
	  </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">2. Ruby</h2>
	  <div class="content" style="margin-top:15px;">
		  <p>Make sure you have <a href="https://www.ruby-lang.org/en/">Ruby</a>, <a href="http://bundler.io/">Bundler</a> and <a href="https://rvm.io/">RVM</a> installed, we use RVM version 1.9.3</p>
		  <p>If you are on a Mac, you'll require a package manager like Homebrew and the latest version of XCode Development Tools, as well as the Xcode Command Line Tools. Although Mac comes with Ruby, it may not be the right version.</p>
		  <p>Install RVM with Ruby with:</p>
		  <p><code class="terminal">\curl -L https://get.rvm.io | bash -s stable --ruby</code></p>
		  <p>After installing RVM, run <code class="terminal">rvm requirements</code> in your terminal to see if anything else is required to install Ruby and Rails.</p>
	  </div>
	</div>

<div class="block block-no-icon">
  <h2 class="block-title">3. Ruby Gems</h2>
  <div class="content">
	  <p>Navigate to the theme folder in your terminal and run <code class="terminal">bundle install</code> or <code class="terminal">bundle update</code>.</p>
	  <p>It will read the Gems specified in the Gemfile and install them (and all their dependencies) one by one.</p>
  </div>
</div>

<div class="block block-no-icon">
  <h2 class="block-title">4. Node.js and npm</h2>
  <div class="content">
	  <p>To use npm (node package manager) in the command line and install all the packages needed in gulp, we need first to install <a href="http://nodejs.org/">Node.js</a>.</p>
  </div>
</div>

<div class="block block-no-icon">
  <h2 class="block-title">5. Gulp</h2>
  <div class="content">

    <p>We use <a href="http://gulpjs.com/">gulp</a> for many tasks which you can find in gulpfile.js. You need to install gulp on your local environment and in the project:</p>
    <p><code class="terminal">npm install gulp -g</code> // global install</p>
    <p><code class="terminal">npm install gulp --save-dev</code> // local install</p>

    <p>Install the <a href="http://gulpjs.com/plugins/">plugins</a> we use:</p>
    <ul>
	    <li>Compass, with sass dependencies (gulp-compass)</li>
	    <li>Autoprefixer (gulp-autoprefixer)</li>
	    <li>Minify CSS (gulp-minify-css)</li>
	    <li>Concatenation (gulp-concat)</li>
	    <li>JSHint (gulp-jshint)</li>
	    <li>Uglify (gulp-uglify)</li>
	    <li>Compress images (gulp-imagemin)</li>
	    <li>Clean files for a clean build (gulp-clean)</li>
	    <li>Rename (gulp-rename)</li>
	    <li>Changed, only pass through changed files (gulp-changed)</li>
	    <li>Caching of images so only changed images are compressed (gulp-cache)</li>
	    <li>Size (gulp-size)</li>
	    <li>Combine media queries (gulp-combine-media-queries)</li>
	    <li>Gulp Plumber, make sure gulp doesn't stop on errors (gulp-plumber)</li>
	    <li>Notify of changes (gulp-notify)</li>
    </ul>

    <p>Command for single install:</p>
    <code class="terminal">npm install gulp-compass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-clean gulp-rename gulp-changed gulp-cache gulp-size gulp-combine-media-queries gulp-plumber gulp-notify --save-dev</code>
    <p>This will install all necessary plugins and save them to devDependencies in package.json.</p>

  </div>
</div>

</article>

Folder Organization
====

<article class="view-mode-full">

	<p>In this subsection we will describe the content of the main folders on our developing branch</p>
	<div class="block block-no-icon">
	  <h2 class="block-title">View of the main folders and files hosted in root</h2>
	  <div class="content" style="margin-top:15px;">
	     <img src="src/images/root_elements.png"></img>
	  </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">dist</h2>
	  <div class="content">
	    <p>In this folder are all the minified files compiled by gulp. Therefore, should be evident we must not make any modification here manually.</p>
	  </div>
    <h2 class="block-title">dist content</h2>
    <div class="content" style="margin-top:15px;">
      <img src="src/images/dist-cont.png"></img>
      <ul class="tree">
        <li>
          css: 
            <p></p>
            <ul>
              <li>ggw.mobile.min.css: 
                  <p></p>
              </li>
              <li>ggw.mobile.responsive.min.css: 
                  <p></p>
              </li>
              <li>ggw.no-query.min.css: 
                  <p></p>
              </li>
              <li>ggw.styles.min.css: 
                  <p></p>
              </li>
            </ul>
        </li>
        <li>
          images: 
            <p></p>
        </li>
        <li>
          js: 
            <p></p>
            <ul>
              <li>before.min.js: 
                  <p></p>
              </li>
              <li>theme.min.js: 
                  <p></p>
              </li>
            </ul>
        </li>
      </ul>
    </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">node_modules</h2>
	  <div class="content">
	     <p>Gulp plugins and other installed NodeJs modules for this project are stored in this folder.</p>
       <p>When you use any gulp task, if you don't have one of the necessary modules, you will receive an error message saying you don't have that module. You can solve this issue easily running in your developing branch:</p>
       <p><code class="terminal">npm install --save-dev Name_of_the_module</code></p>
	  </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">src</h2>
	  <div class="content">
	     <p>This is the source branch for editing the content of Greenpeace Greenwire web page.</p>
	  </div>
    <h2 class="block-title">src content</h2>
    <div class="content" style="margin-top:15px;">
      <img src="src/images/src-cont.png"></img>
      <ul class="tree">
        <li>
          css: 
            <p>In this folder you can find the compiled but not minified css files by gulp task. Also you will find some css files related with this styleguide (you will find more information in the next subsection: "Editing this Styleguide".)</p>
        </li>
        <li>
          font: 
            <p></p>
        </li>
        <li>
          images: 
            <p></p>
        </li>
        <li>
          js: 
            <p></p>
            <ul>
              <li>base: 
                  <p></p>
              </li>
              <li>before: 
                  <p></p>
              </li>
              <li>contrib: 
                  <p></p>
              </li>
              <li>custom: 
                  <p></p>
              </li>
              <li>oldie: 
                  <p></p>
              </li>
              <li>js files: 
                  <p>Compiled but not minified js files by gulp task from previous folders.</p>
              </li>
            </ul>
        </li>
        <li>
          libraries: 
            <p></p>
        </li>
        <li>
          modules: 
            <p>PHP modules/components from the different web pages in Greenpeace Greenwire.</p>
        </li>
        <li>
          sass: 
            <p></p>
            <ul>
              <li>abstractions: 
                  <p></p>
              </li>
              <li>base: 
                  <p></p>
              </li>
              <li>components: 
                  <p></p>
              </li>
              <li>layouts: 
                  <p></p>
              </li>
              <li>modules: 
                  <p></p>
              </li>
              <li>styleguide: 
                  <p>scss files related with this styleguide. Check next next subsection: "Editing this Styleguide".</p>
              </li>
              <li>variables: 
                  <p></p>
              </li>
              <li>scss files: 
                  <p>Compiled but not minified scss files from by gulp task from previous folders.</p>
              </li>
            </ul>
        </li>
        <li>
          PHP files: 
            <p>PHP web pages from Greenpeace Greenwire.</p>
        </li>
      </ul>
    </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">styleguide</h2>
	  <div class="content">
	     <p>The styleguide folder contains all the necessary files to run this Styleguide.</p>
       <p>In the next sub-section "Editing this Styleguide", you will learn in detail the content of this folder and how you should edit it to make modifications in Greenwire Styleguide web page.</p>
	  </div>
	</div>

</article>

Editing this Styleguide
====

<article class="view-mode-full">

	<p>In this subsection we will describe how to modify the content and the style on this styleguide.</p>

	<div class="block block-no-icon">
	  <h2 class="block-title">Home content</h2>
	  <div class="content" style="margin-top:15px;">
	  	<p>The content in 'Home' section (the one that you are reading just now) should be edited in ~/ggw_styleguide/src/css/ggw.styleguide.css</p>
	  	<p>In this CSS file you will notice all the markup is written with commented html following the styleguide rules described in the other sections.</p>
	  	<img src="src/images/Styleguide-content-sample.png">
	  </div>
	</div>

	<div class="block block-no-icon">
	  <h2 class="block-title">Sections content</h2>
	  <div class="content" style="margin-top:15px;">
	  	<p>The content in the different sections (base, components, modules...) should be edited in  '~/ggw_styleguide/src/sass/styleguide/*section*.scss'</p>
	  	<p>You can add a new section following this 2 steps:</p>
      <ul>
	      <li>Create a new scss file in '~/ggw_styleguide/src/sass/styleguide/'</li>
	      <li>
          <p>Add at the end of '~/ggw_styleguide/src/css/ggw.styleguide.css' file this line: </p>
          <p>'@import url('Name_of_the_new_added_section.css');'</p>
        </li>
      </ul>
      <p>You will notice that the extension of the file is css instead of scss when you '@import' it, because we will call the compiled file after using gulp in the next step.</p>
	  </div>
	</div>

  <div class="block block-no-icon">
    <h2 class="block-title">Compiling after the modifications</h2>
    <div class="content">
      <p>To apply all these modifications, after saving it is necessary to execute <code class="terminal">gulp build-styleguide</code> in the root of the develping branch '~/ggw_styleguide/'.</p>
      <p>This gulp task will compile and overwrite the css files based on this modifications and on the styles from greenwire in '~/ggw_styleguide/src/css/styleguide/' and '~/ggw_styleguide/styleguide/src/css/', necessary to run the styleguide.</p>
    </div>
  </div>

  <div class="block block-no-icon">
    <h2 class="block-title">Styleguide markup, style and js</h2>
    <div class="content">
      <p>These are the different files and locations to style and change the behaviour of the styleguide:</p>
      <ul class="tree">
	      <li>
          HTML: 
          <p>'~/ggw_styleguide/styleguide/index.html' and '~/ggw_styleguide/styleguide/templates/'</p>
        </li>
	      <li>
          CSS: 
          <p>'~/ggw_styleguide/styleguide/css/theme.css'</p>
        </li>
        <li>
          Images and fonts: 
          <p>'~/ggw_styleguide/styleguide/src'. Both folders receive a copy of all the images and fonts from greenwire when using gulp.</p>
        </li>
	      <li>
          JS: 
          <p>'~/ggw_styleguide/styleguide/js/'</p>
        </li>
      </ul>
    </div>
  </div>

</article>

*/

@import url('base.css');
@import url('components.css');
@import url('modules.css');
